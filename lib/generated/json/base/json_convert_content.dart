// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter_git_repo_demo/model/issue_entity.dart';
import 'package:flutter_git_repo_demo/generated/json/issue_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
		switch (type) {
			case IssueEntity:
				return issueEntityFromJson(data as IssueEntity, json) as T;
			case IssueUser:
				return issueUserFromJson(data as IssueUser, json) as T;
			case IssueLabels:
				return issueLabelsFromJson(data as IssueLabels, json) as T;
			case IssueAssignee:
				return issueAssigneeFromJson(data as IssueAssignee, json) as T;
			case IssuePullRequest:
				return issuePullRequestFromJson(data as IssuePullRequest, json) as T;    }
		return data as T;
	}

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case IssueEntity:
				return issueEntityToJson(data as IssueEntity);
			case IssueUser:
				return issueUserToJson(data as IssueUser);
			case IssueLabels:
				return issueLabelsToJson(data as IssueLabels);
			case IssueAssignee:
				return issueAssigneeToJson(data as IssueAssignee);
			case IssuePullRequest:
				return issuePullRequestToJson(data as IssuePullRequest);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (IssueEntity).toString()){
			return IssueEntity().fromJson(json);
		}
		if(type == (IssueUser).toString()){
			return IssueUser().fromJson(json);
		}
		if(type == (IssueLabels).toString()){
			return IssueLabels().fromJson(json);
		}
		if(type == (IssueAssignee).toString()){
			return IssueAssignee().fromJson(json);
		}
		if(type == (IssuePullRequest).toString()){
			return IssuePullRequest().fromJson(json);
		}

		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<IssueEntity>[] is M){
			return data.map<IssueEntity>((e) => IssueEntity().fromJson(e)).toList() as M;
		}
		if(<IssueUser>[] is M){
			return data.map<IssueUser>((e) => IssueUser().fromJson(e)).toList() as M;
		}
		if(<IssueLabels>[] is M){
			return data.map<IssueLabels>((e) => IssueLabels().fromJson(e)).toList() as M;
		}
		if(<IssueAssignee>[] is M){
			return data.map<IssueAssignee>((e) => IssueAssignee().fromJson(e)).toList() as M;
		}
		if(<IssuePullRequest>[] is M){
			return data.map<IssuePullRequest>((e) => IssuePullRequest().fromJson(e)).toList() as M;
		}

		throw Exception("not found");
	}

  static M fromJsonAsT<M>(json) {
		if (json is List) {
			return _getListChildType<M>(json);
		} else {
			return _fromJsonSingle<M>(json) as M;
		}
	}
}